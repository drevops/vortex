@@ -38,8 +38,6 @@
         description: 'Enable terminal session.'
         required: false
         default: false
-  schedule:
-    - cron: '0 18 * * *'
 
 defaults:
   run:
@@ -46,109 +44,10 @@
     shell: bash
 
 jobs:
-  database:
-    runs-on: ubuntu-latest
 
-    container:
-      image: drevops/ci-runner:__VERSION__
-
-      env:
-        TZ: Australia/Melbourne
-        TERM: xterm-256color
-        VORTEX_SSH_DISABLE_STRICT_HOST_KEY_CHECKING: "1"
-        VORTEX_SSH_REMOVE_ALL_KEYS: "1"
-        VORTEX_CONTAINER_REGISTRY_USER: ${{ secrets.VORTEX_CONTAINER_REGISTRY_USER }}
-        VORTEX_CONTAINER_REGISTRY_PASS: ${{ secrets.VORTEX_CONTAINER_REGISTRY_PASS }}
-        VORTEX_DEBUG: ${{ vars.VORTEX_DEBUG }}
-        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
-        # How often to refresh the cache of the DB dump. Refer to `date` command.
-        VORTEX_CI_DB_CACHE_TIMESTAMP: +%Y%m%d
-        # Use previous database caches on this branch as a fallback if the above cache
-        # does not match (for example, the cache is available only from the previous
-        # day). If "no" is set, the cache will be rebuilt from scratch.
-        VORTEX_CI_DB_CACHE_FALLBACK: "yes"
-        # Which branch to use as a source of DB caches.
-        VORTEX_CI_DB_CACHE_BRANCH: "develop"
-
-    steps:
-      - name: Preserve $HOME set in the container
-        run: echo HOME=/root >> "$GITHUB_ENV" # https://github.com/actions/runner/issues/863
-
-      - name: Check out code
-        uses: actions/checkout@__VERSION__
-        with:
-          # Do not keep SSH credentials after checkout to allow custom.
-          persist-credentials: false
-
-      - name: Add SSH private key to the runner
-        if: ${{ env.VORTEX_DOWNLOAD_DB_SSH_PRIVATE_KEY != '' }}
-        uses: shimataro/ssh-key-action@__VERSION__
-        with:
-          key: ${{ secrets.VORTEX_DOWNLOAD_DB_SSH_PRIVATE_KEY }}
-          known_hosts: unnecessary
-        env:
-          VORTEX_DOWNLOAD_DB_SSH_PRIVATE_KEY: ${{ secrets.VORTEX_DOWNLOAD_DB_SSH_PRIVATE_KEY }}
-
-      - name: Process the codebase to run in CI
-        run: find . -name "docker-compose.yml" -print0 | xargs -0 -I {} sh -c "sed -i -e '/###/d' {} && sed -i -e 's/##//' {}"
-
-      - name: Adjust variables for a scheduled run
-        if: github.event_name == 'schedule'
-        run: |
-          echo "VORTEX_CI_DB_CACHE_FALLBACK=no" >> "$GITHUB_ENV"
-
-      - name: Create cache keys files for database caching
-        run: |
-          echo "${VORTEX_CI_DB_CACHE_BRANCH}" | tee db_cache_branch
-          echo "${VORTEX_CI_DB_CACHE_FALLBACK/no/"${GITHUB_RUN_NUMBER}"}" | tee db_cache_fallback
-          date "${VORTEX_CI_DB_CACHE_TIMESTAMP}" | tee db_cache_timestamp
-          echo "yes" | tee db_cache_fallback_yes
-
-      # Restore DB cache based on the cache strategy set by the cache keys below.
-      # Change 'v1' to 'v2', 'v3' etc., commit and push to force cache reset.
-      # Lookup cache based on the default branch and a timestamp. Allows
-      # to use cache from the very first build on the day (sanitized database dump, for example).
-      - name: Restore DB cache
-        uses: actions/cache/restore@__VERSION__
-        with:
-          path: .data
-          key: v25.5.0-db11-${{ hashFiles('db_cache_branch') }}-${{ hashFiles('db_cache_fallback') }}-${{ hashFiles('db_cache_timestamp') }}
-          # Fallback to caching by default branch name only. Allows to use
-          # cache from the branch build on the previous day.
-          restore-keys: |
-            v25.5.0-db11-${{ hashFiles('db_cache_branch') }}-${{ hashFiles('db_cache_fallback') }}-
-
-      - name: Download DB
-        run: |
-          VORTEX_DB_DOWNLOAD_SEMAPHORE=/tmp/download-db-success ./scripts/vortex/download-db.sh
-          echo "db_hash=${{ hashFiles('.data') }}" >> "$GITHUB_ENV"
-        timeout-minutes: 30
-
-      - name: Export DB
-        run: |
-          if [ ! -f /tmp/download-db-success ]; then echo "==> Database download semaphore file is missing. DB export will not proceed."; exit 0; fi
-          ./scripts/vortex/login-container-registry.sh
-          docker compose up --detach && sleep 15
-          docker compose exec cli mkdir -p .data && docker compose cp -L .data/db.sql cli:/app/.data/db.sql
-          docker compose exec cli bash -c "VORTEX_PROVISION_POST_OPERATIONS_SKIP=1 ./scripts/vortex/provision.sh"
-          ./scripts/vortex/export-db.sh db.sql
-        timeout-minutes: 30
-
-      # Save cache per default branch and the timestamp.
-      # The cache will not be saved if it already exists.
-      # Note that the cache fallback flag is enabled for this case in order
-      # to save cache even if the fallback is not used when restoring it.
-      - name: Save DB cache
-        uses: actions/cache/save@__VERSION__
-        if: env.db_hash != hashFiles('.data')
-        with:
-          path: .data
-          key: v25.5.0-db11-${{ hashFiles('db_cache_branch') }}-${{ hashFiles('db_cache_fallback_yes') }}-${{ hashFiles('db_cache_timestamp') }}
-
   build:
     runs-on: ubuntu-latest
     needs: database
-    if: github.event_name != 'schedule'
 
     strategy:
       matrix:
@@ -167,14 +66,6 @@
         VORTEX_CONTAINER_REGISTRY_USER: ${{ secrets.VORTEX_CONTAINER_REGISTRY_USER }}
         VORTEX_CONTAINER_REGISTRY_PASS: ${{ secrets.VORTEX_CONTAINER_REGISTRY_PASS }}
         VORTEX_DEBUG: ${{ vars.VORTEX_DEBUG }}
-        # How often to refresh the cache of the DB dump. Refer to `date` command.
-        VORTEX_CI_DB_CACHE_TIMESTAMP: +%Y%m%d
-        # Use previous database caches on this branch as a fallback if the above cache
-        # does not match (for example, the cache is available only from the previous
-        # day). If "no" is set, the cache will be rebuilt from scratch.
-        VORTEX_CI_DB_CACHE_FALLBACK: "yes"
-        # Which branch to use as a source of DB caches.
-        VORTEX_CI_DB_CACHE_BRANCH: "develop"
 
     steps:
       - name: Preserve $HOME set in the container
@@ -190,29 +81,6 @@
         run: composer validate --strict
         continue-on-error: ${{ vars.VORTEX_CI_COMPOSER_VALIDATE_IGNORE_FAILURE == '1' }}
 
-      - name: Create cache keys files for database caching
-        run: |
-          echo "${VORTEX_CI_DB_CACHE_BRANCH}" | tee db_cache_branch
-          echo "yes" | tee db_cache_fallback_yes
-          date "${VORTEX_CI_DB_CACHE_TIMESTAMP}" | tee db_cache_timestamp
-
-      - name: Show cache key for database caching
-        run: echo 'v25.5.0-db11-${{ hashFiles('db_cache_branch') }}-${{ hashFiles('db_cache_fallback_yes') }}-${{ hashFiles('db_cache_timestamp') }}'
-
-      # Restore DB cache based on the cache strategy set by the cache keys below.
-      # Change 'v1' to 'v2', 'v3' etc., commit and push to force cache reset.
-      # Lookup cache based on the default branch and a timestamp. Allows
-      # to use cache from the very first build on the day (sanitized database dump, for example).
-      - name: Restore DB cache
-        uses: actions/cache/restore@__VERSION__
-        with:
-          path: .data
-          fail-on-cache-miss: true
-          # Use cached database from previous builds of this branch.
-          key: v25.5.0-db11-${{ hashFiles('db_cache_branch') }}-${{ hashFiles('db_cache_fallback_yes') }}-${{ hashFiles('db_cache_timestamp') }}
-          restore-keys: |
-            v25.5.0-db11-${{ hashFiles('db_cache_branch') }}-${{ hashFiles('db_cache_fallback_yes') }}-
-
       - name: Login to container registry
         run: ./scripts/vortex/login-container-registry.sh
 
@@ -343,7 +211,6 @@
   deploy:
     runs-on: ubuntu-latest
     needs: build
-    if: ${{ github.event_name != 'schedule' && !startsWith(github.head_ref || github.ref_name, 'deps/') }}
 
     container:
       image: drevops/ci-runner:__VERSION__
